{"version":3,"file":"todo-item.js","sourceRoot":"","sources":["../../src/Todo/todo-item.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EACL,aAAa,EACb,QAAQ,GACT,MAAM,wCAAwC,CAAC;AAGhD,IAAM,QAAQ,GAAd,MAAM,QAAS,SAAQ,UAAU;IAAjC;;QAE8B,cAAS,GAAG,EAAE,CAAC;QACd,SAAI,GAAG,KAAK,CAAC;IAqD5C,CAAC;IAnDU,MAAM;QACb,OAAO,IAAI,CAAA;;;;qBAIM,IAAI,CAAC,IAAI;oBACV,IAAI,CAAC,WAAW;;;;mBAIjB,IAAI,CAAC,SAAS;mBACd,IAAI,CAAC,YAAY;;yBAEX,IAAI,CAAC,WAAW;;KAEpC,CAAC;IACJ,CAAC;IAEO,WAAW,CAAC,CAAQ;QAC1B,IAAI,CAAC,IAAI,GAAI,CAAC,CAAC,MAA2B,CAAC,OAAO,CAAC;QACnD,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAEO,YAAY,CAAC,CAAQ;QAC3B,IAAI,CAAC,SAAS,GAAI,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC;QACtD,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAEO,WAAW;QACjB,IAAI,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,aAAa,EAAE;YAC7B,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,IAAI;SACf,CAAC,CACH,CAAC;IACJ,CAAC;IAEO,oBAAoB;QAC1B,IAAI,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,aAAa,EAAE;YAC7B,MAAM,EAAE;gBACN,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,IAAI,EAAE,IAAI,CAAC,IAAI;aAChB;YACD,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,IAAI;SACf,CAAC,CACH,CAAC;IACJ,CAAC;CACF,CAAA;AAvD6B;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;wCAAiB;AAChB;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;2CAAgB;AACd;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;sCAAc;AAHtC,QAAQ;IADb,aAAa,CAAC,WAAW,CAAC;GACrB,QAAQ,CAwDb","sourcesContent":["import { LitElement, html } from \"lit\";\nimport {\n  customElement,\n  property,\n} from \"./../../node_modules/lit/decorators.js\";\n\n@customElement(\"todo-item\")\nclass TodoItem extends LitElement {\n  @property({ type: Number }) todoId!: number;\n  @property({ type: String }) todoTitle = \"\";\n  @property({ type: Boolean }) done = false;\n\n  override render() {\n    return html`\n      <div class=\"item\">\n        <input\n          type=\"checkbox\"\n          .checked=${this.done}\n          @change=${this._toggleDone}\n        />\n        <input\n          type=\"text\"\n          .value=${this.todoTitle}\n          @input=${this._updateTitle}\n        />\n        <button @click=${this._deleteItem}>Delete</button>\n      </div>\n    `;\n  }\n\n  private _toggleDone(e: Event) {\n    this.done = (e.target as HTMLInputElement).checked;\n    this._dispatchChangeEvent();\n  }\n\n  private _updateTitle(e: Event) {\n    this.todoTitle = (e.target as HTMLInputElement).value;\n    this._dispatchChangeEvent();\n  }\n\n  private _deleteItem() {\n    this.dispatchEvent(\n      new CustomEvent(\"delete-item\", {\n        detail: this.todoId,\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  private _dispatchChangeEvent() {\n    this.dispatchEvent(\n      new CustomEvent(\"update-item\", {\n        detail: {\n          todoId: this.todoId,\n          todoTitle: this.todoTitle,\n          done: this.done,\n        },\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"todo-item\": TodoItem;\n  }\n}\n"]}