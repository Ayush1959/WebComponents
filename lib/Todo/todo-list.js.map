{"version":3,"file":"todo-list.js","sourceRoot":"","sources":["../../src/Todo/todo-list.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AACnE,OAAO,aAAa,CAAC;AASrB,IAAM,QAAQ,GAAd,MAAM,QAAS,SAAQ,UAAU;IAAjC;;QAC6B,aAAQ,GAAW,EAAE,CAAC;QACxC,WAAM,GAAG,CAAC,CAAC;IAkDtB,CAAC;IAhDU,MAAM;QACb,OAAO,IAAI,CAAA;;;;2BAIY,IAAI,CAAC,QAAQ;;UAE9B,IAAI,CAAC,QAAQ,CAAC,GAAG,CACjB,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,CAAA;;qBAEV,KAAK;wBACF,IAAI,CAAC,MAAM;2BACR,IAAI,CAAC,SAAS;sBACnB,IAAI,CAAC,IAAI;6BACF,IAAI,CAAC,WAAW;6BAChB,IAAI,CAAC,WAAW;;WAElC,CACF;;KAEJ,CAAC;IACJ,CAAC;IAEO,QAAQ;QACd,MAAM,KAAK,GAAG,IAAI,CAAC,UAAW,CAAC,cAAc,CAC3C,UAAU,CACS,CAAC;QACtB,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QACrC,IAAI,SAAS,EAAE,CAAC;YACd,IAAI,CAAC,QAAQ,GAAG;gBACd,GAAG,IAAI,CAAC,QAAQ;gBAChB,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE;aAClD,CAAC;YACF,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAEO,WAAW,CAAC,CAAc;QAChC,MAAM,WAAW,GAAG,CAAC,CAAC,MAAc,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACzC,IAAI,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CACxD,CAAC;IACJ,CAAC;IAEO,WAAW,CAAC,CAAc;QAChC,MAAM,MAAM,GAAG,CAAC,CAAC,MAAgB,CAAC;QAClC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC;IACzE,CAAC;CACF,CAAA;AAnD4B;IAA1B,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;0CAAuB;AACxC;IAAR,KAAK,EAAE;wCAAY;AAFhB,QAAQ;IADb,aAAa,CAAC,WAAW,CAAC;GACrB,QAAQ,CAoDb","sourcesContent":["import { LitElement, html } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\nimport \"./todo-item\";\n\ninterface Todo {\n  todoId: number;\n  todoTitle: string;\n  done: boolean;\n}\n\n@customElement(\"todo-list\")\nclass TodoList extends LitElement {\n  @property({ type: Array }) todoList: Todo[] = [];\n  @state() nextId = 1;\n\n  override render() {\n    return html`\n      <div class=\"list\">\n        <div class=\"add-todo\">\n          <input id=\"new-todo\" type=\"text\" placeholder=\"Add a new task\" />\n          <button @click=${this._addTodo}>Add Task</button>\n        </div>\n        ${this.todoList.map(\n          (todo, index) => html`\n            <todo-item\n              .key=${index}\n              .todoId=${todo.todoId}\n              .todoTitle=${todo.todoTitle}\n              .done=${todo.done}\n              @update-item=${this._updateTodo}\n              @delete-item=${this._deleteTodo}\n            ></todo-item>\n          `\n        )}\n      </div>\n    `;\n  }\n\n  private _addTodo() {\n    const input = this.shadowRoot!.getElementById(\n      \"new-todo\"\n    ) as HTMLInputElement;\n    const todoTitle = input.value.trim();\n    if (todoTitle) {\n      this.todoList = [\n        ...this.todoList,\n        { todoId: this.nextId++, todoTitle, done: false },\n      ];\n      input.value = \"\";\n    }\n  }\n\n  private _updateTodo(e: CustomEvent) {\n    const updatedTodo = e.detail as Todo;\n    this.todoList = this.todoList.map((todo) =>\n      todo.todoId === updatedTodo.todoId ? updatedTodo : todo\n    );\n  }\n\n  private _deleteTodo(e: CustomEvent) {\n    const todoId = e.detail as number;\n    this.todoList = this.todoList.filter((todo) => todo.todoId !== todoId);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"todo-list\": TodoList;\n  }\n}\n"]}